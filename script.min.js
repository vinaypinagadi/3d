import * as e from "three";
import {
    GLTFLoader as r
} from "three/examples/jsm/loaders/GLTFLoader.js";
import {
    DRACOLoader as o
} from "three/examples/jsm/loaders/DRACOLoader.js";
window.scrollTo(0, 0);
var cameraEmptyUpsell, servicesWrapperWidth, renderUpsellPauseFunc, menuItemData, menuItemId, menuItemPos, renderPass, composer, finalComposer, finalComposerSSAA, fxaaPass, smaaPass, ssaaRenderPass, action, actionUpsell, action1, gltfAnimation, gltfAnimationUpsell, gltfAnimation1, roomCreatedAni, geometry, particleCount, i, h, color, size, sprite, parameters, parameterCount, particles, particles2, roomProgress, clipDuration, timeAnim, timeParticles, renderCalls = [],
    particlesPoints = [],
    mixerList = [],
    clipList = [],
    actionList = [],
    materialsParticle = [],
    time = 0;
let surface = new e.Mesh,
    timeUniform = new e.Uniform(time);
var entranceGodrayRandom = 0,
    renderer = new e.WebGLRenderer({
        alpha: !0,
        antialias: !0
    });
renderer.autoClear = !1, renderer.setSize(window.innerWidth, window.innerHeight), renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)), renderer.outputColorSpace = e.LinearSRGBColorSpace, document.querySelector("#scene-inner").appendChild(renderer.domElement);
var rendererUpsell = new e.WebGLRenderer({
    alpha: !0,
    antialias: !0
});
rendererUpsell.setSize(window.innerWidth, window.innerHeight), rendererUpsell.setPixelRatio(Math.min(window.devicePixelRatio, 2)), rendererUpsell.toneMapping = e.ACESFilmicToneMapping, window.innerWidth > 960 && (rendererUpsell.shadowMap.enabled = !0), document.querySelector("#scene_product").appendChild(rendererUpsell.domElement);
var scene = new e.Scene,
    holder = new e.Group;
scene.add(holder), scene.rotation.x = .38, scene.rotation.y = 7.8, scene.rotation.z = 5.9;
var camera = new e.PerspectiveCamera;
holder.add(camera);
var sceneUpsell = new e.Scene,
    holderUpsell = new e.Group;
sceneUpsell.add(holderUpsell), sceneUpsell.rotation.x = .38, sceneUpsell.rotation.y = 7.05, sceneUpsell.rotation.z = 6.4;
var cameraUpsell = new e.PerspectiveCamera;
holderUpsell.add(cameraUpsell);
let textureLoader = new e.TextureLoader,
    skyGeo = new e.SphereGeometry(300, 32, 32),
    skyTexture;
skyTexture = window.innerWidth > 960 ? textureLoader.load("/model/img/sky_hdri7.webp") : textureLoader.load("/model/img/mobile/sky_hdri7-mobile.webp");
var skyMaterial = new e.MeshBasicMaterial({
        map: skyTexture,
        side: e.BackSide
    }),
    skyMesh = new e.Mesh(skyGeo, skyMaterial);
skyMesh.position.x = 0, skyMesh.position.y = 0, skyMesh.position.z = -100, skyMesh.rotation.y = 1.7, scene.add(skyMesh);
let environmentMap = new e.TextureLoader().load("/model/img/hdr5.jpg");
environmentMap.mapping = e.EquirectangularReflectionMapping, sceneUpsell.environment = environmentMap;
let lightUpsell = new e.AmbientLight(4210752, 12);
for (holderUpsell.add(lightUpsell), particleCount = 35, i = 0; i < particleCount; i++) {
    var t = new e.Vector3;
    t.x = 20 * Math.random() - 7, t.y = 20 * Math.random() - 7, t.z = 20 * Math.random() - 7, particlesPoints.push(t)
}
geometry = new e.BufferGeometry().setFromPoints(particlesPoints);
let spriteFive = textureLoader.load("/model/img/particles.png");
for (i = 0, parameterCount = (parameters = [
        [
            [1, 1, .5], 1.2, spriteFive
        ],
        [
            [.95, 1, .5], .6, spriteFive
        ],
        [
            [.9, 1, .5], 1.4, spriteFive
        ],
        [
            [.85, 1, .5], .6, spriteFive
        ],
        [
            [.8, 1, .5], .7, spriteFive
        ]
    ]).length; i < parameterCount; i++) color = parameters[i][0], size = parameters[i][1], sprite = parameters[i][2], materialsParticle[i] = new e.PointsMaterial({
    size: size,
    map: sprite,
    alphaTest: .01,
    transparent: !0,
    depthWrite: !1
}), (particles = new e.Points(geometry, materialsParticle[i])).rotation.x = 6 * Math.random(), particles.rotation.y = 6 * Math.random(), particles.rotation.z = 6 * Math.random(), particles.name = "particle", scene.add(particles);

function waterStart() {
    let r = `
        const vec3 DAY_SKY_COLOR = vec3(0.545,0.718,0.573);
        const vec3 DAY_HORIZON_COLOR = vec3(0.,0.,0.);

        vec3 sampleSkybox(vec3)
        {
            float density = 0.01;
            vec3 day = mix(DAY_SKY_COLOR, DAY_HORIZON_COLOR, density);
            vec3 sky = day;
            return sky;
        }
    `;
    e.ShaderChunk.skybox = r;
    let o = `
        const float NORMAL_MAP_SCALE = 0.04;
        const float NORMAL_MAP_STRENGTH = 10.0;
        const vec2 VELOCITY_1 = vec2(0.05, 0.0);
        const vec2 VELOCITY_2 = vec2(0.0, 0.05);
        const float SPECULAR_SHARPNESS = 0.07;

        uniform float _Time;
        uniform sampler2D _NormalMap1;
        uniform sampler2D _NormalMap2;
    `;
    e.ShaderChunk.ocean = o;
    let t = new e.ShaderMaterial,
        a = new e.Uniform(new e.TextureLoader().load("/model/img/waterNormal1.png"));
    a.value.wrapS = e.RepeatWrapping, a.value.wrapT = e.RepeatWrapping;
    let n = new e.Uniform(new e.TextureLoader().load("/model/img/waterNormal2.png"));
    n.value.wrapS = e.RepeatWrapping, n.value.wrapT = e.RepeatWrapping;
    let l = `
        #include <ocean>
        varying vec2 _worldPos;
        varying vec2 _uv;

        void main()
        {
            vec4 worldPos = vec4(position, 1.0);
            _worldPos = worldPos.xz;
            _uv = _worldPos * NORMAL_MAP_SCALE;
            gl_Position = projectionMatrix * viewMatrix * modelMatrix * worldPos;
        }
    `,
        s = `
        #include <skybox>
        #include <ocean>
        varying vec2 _worldPos;
        varying vec2 _uv;

        void main()
        {
            vec3 viewVec = vec3(_worldPos.x, 0.0, _worldPos.y) - cameraPosition;
            float viewLen = length(viewVec);
            vec3 viewDir = viewVec / viewLen;

            vec3 normal = texture2D(_NormalMap1, _uv + VELOCITY_1 * _Time).xyz * 2.0 - 1.0;
            normal += texture2D(_NormalMap1, _uv + VELOCITY_2 * _Time).xyz * 2.0 - 1.0;
            normal *= NORMAL_MAP_STRENGTH;
            normal += vec3(0.0, 0.0, 1.0);
            normal = normalize(normal).xzy;

            if (cameraPosition.y > 0.0)
            {
                vec3 halfWayDir = normalize(viewDir);
                float specular = max(0.0, dot(normal, halfWayDir));
                specular = pow(specular, SPECULAR_SHARPNESS);

                float reflectivity = 1.25 - max(0.0, dot(-viewDir, normal));

                vec3 reflection = sampleSkybox(reflect(viewDir, normal));
                vec3 surface = reflectivity * reflection;
                surface = max(surface, specular);

                gl_FragColor = vec4(surface, max(reflectivity, specular));
                // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
                return;
            }
        }
    `;
    t.vertexShader = l, t.fragmentShader = s, t.uniforms = {
        _Time: timeUniform,
        _NormalMap1: a,
        _NormalMap2: n
    }, t.alphaTest = .01, t.depthWrite = !1;
    let m = new Float32Array([-32 / 7, 0, -32, 32 / 7, 0, -32, -32 / 7, 0, 32, 32 / 7, 0, 32]),
        c = new e.BufferGeometry;
    c.setAttribute("position", new e.BufferAttribute(m, 3)), c.setIndex([2, 3, 0, 3, 1, 0]), surface.geometry = c, surface.material = t, surface.position.set(0, -3.5, -98), surface.layers.enable(1), scene.add(surface)
}
if (window.innerWidth > 960) {
    var a = document.getElementById("video_desktop");
    a.play();
    var n = new e.VideoTexture(a);
    n.minFilter = e.LinearFilter, n.magFilter = e.LinearFilter;
    var textureVideoDesktopMaterial = new e.MeshBasicMaterial({
            map: n
        }),
        l = document.getElementById("video_mobile");
    l.play();
    var s = new e.VideoTexture(l);
    s.minFilter = e.LinearFilter, s.magFilter = e.LinearFilter;
    var textureVideoMobileMaterial = new e.MeshBasicMaterial({
        map: s
    })
} else textureVideoDesktopImg = new e.TextureLoader().load("/model/img/video-desktop-img.webp"), textureVideoDesktopMaterial = new e.MeshBasicMaterial({
    map: textureVideoDesktopImg
}), textureVideoMobileImg = new e.TextureLoader().load("/model/img/video-mobile-img.webp"), textureVideoMobileMaterial = new e.MeshBasicMaterial({
    map: textureVideoMobileImg
});
Object.defineProperty(HTMLMediaElement.prototype, "playing", {
    get: function() {
        return !!(this.currentTime > 0 && !this.paused && !this.ended && this.readyState > 2)
    }
}), document.body.addEventListener("touchstart", () => {
    var e = document.getElementById("video_contact");
    e.playing || e.play()
});
let whiteMaterial = new e.MeshBasicMaterial({
        color: 16773083
    }),
    entranceMaterial0 = new e.MeshBasicMaterial({
        color: 16754841,
        blending: e.AdditiveBlending,
        transparent: !0
    }),
    entranceMaterial0Cover = new e.MeshBasicMaterial({
        color: 16769983,
        blending: e.AdditiveBlending,
        transparent: !0
    }),
    entranceMaterial1 = new e.MeshBasicMaterial({
        color: 16754841,
        blending: e.AdditiveBlending,
        transparent: !0
    }),
    entranceMaterial1Cover = new e.MeshBasicMaterial({
        color: 16769983,
        transparent: !0
    }),
    entranceMaterial2 = new e.MeshBasicMaterial({
        color: 16754841,
        blending: e.AdditiveBlending,
        transparent: !0
    }),
    entranceMaterial2Cover = new e.MeshBasicMaterial({
        color: 16769983,
        transparent: !0
    }),
    blackMaterial = new e.MeshBasicMaterial({
        color: "black",
        side: e.DoubleSide
    }),
    materials = {};
var gltfLoaded = !1,
    initialScreenSize = window.innerWidth;
document.getElementsByClassName("services-inner-pos")[0].style.width = document.documentElement.clientWidth + "px", window.addEventListener("resize", function() {
    document.getElementsByClassName("services-inner-pos")[0].style.width = document.documentElement.clientWidth + "px", windowHalfX = window.innerWidth / 2, windowHalfY = window.innerHeight / 2, initialScreenSize > 959 && window.innerWidth < 960 ? location.reload() : initialScreenSize < 960 && window.innerWidth > 959 && location.reload(), camera.aspect = window.innerWidth / window.innerHeight, camera.updateProjectionMatrix(), renderer.setSize(window.innerWidth, window.innerHeight), cameraUpsell.aspect = window.innerWidth / window.innerHeight, cameraUpsell.updateProjectionMatrix(), rendererUpsell.setSize(window.innerWidth, window.innerHeight)
});
let entranceGodrayTexture, entranceWallTexture, room1WallTexture, room1FloorTexture, room1WindowTexture, room1Furniture1Texture, room1Furniture2Texture, room2FloorTexture, room2BlocksTexture, room2WallTexture, room2ProductsTexture, room3FloorTexture, room3RocksTexture, room3DeerTexture, room4RoofTexture, room4FloorTexture, room4PlatformsTexture, room4ItemsTexture, room3Plants1ComTexture, room3Plants2ComTexture;
window.innerWidth > 960 ? (entranceGodrayTexture = textureLoader.load("/model/img/main_entrance_ray.png"), entranceWallTexture = textureLoader.load("/model/img/entrance_main-com.jpg"), room1WallTexture = textureLoader.load("/model/img/room1_wall-resize.webp"), room1FloorTexture = textureLoader.load("/model/img/room1_floor-resize.webp"), room1WindowTexture = textureLoader.load("/model/img/room1_window-resize.webp"), room1Furniture1Texture = textureLoader.load("/model/img/room1_furniture1-resize.webp"), room1Furniture2Texture = textureLoader.load("/model/img/room1_furniture2-adjusted.webp"), room2FloorTexture = textureLoader.load("/model/img/room2_floor-resize.webp"), room2BlocksTexture = textureLoader.load("/model/img/room2_blocks-resize.webp"), room2WallTexture = textureLoader.load("/model/img/room2_wall-topaz-compressed.jpg"), room2ProductsTexture = textureLoader.load("/model/img/room2_products-topaz-resize.webp"), room3FloorTexture = textureLoader.load("/model/img/room3_floor-resize.webp"), room3RocksTexture = textureLoader.load("/model/img/room3_rocks-den.webp"), room3DeerTexture = textureLoader.load("/model/img/room3_deer-den.webp"), room4RoofTexture = textureLoader.load("/model/img/room4_roof-topaz.webp"), room4FloorTexture = textureLoader.load("/model/img/room4_floor-resize.webp"), room4PlatformsTexture = textureLoader.load("/model/img/room4_platforms-den.webp"), room4ItemsTexture = textureLoader.load("/model/img/room4_items-topaz.webp"), room3Plants1ComTexture = textureLoader.load("/model/img/room3_plants1_com1.webp"), room3Plants2ComTexture = textureLoader.load("/model/img/room3_plants2_com1.webp")) : (entranceGodrayTexture = textureLoader.load("/model/img/mobile/entrance_ray-min-mobile.png"), entranceWallTexture = textureLoader.load("/model/img/mobile/entrance_main-com-mobile.jpg"), room1WallTexture = textureLoader.load("/model/img/mobile/room1_wall-resize-mobile.webp"), room1FloorTexture = textureLoader.load("/model/img/mobile/room1_floor-resize-mobile.webp"), room1WindowTexture = textureLoader.load("/model/img/mobile/room1_window-resize-mobile.webp"), room1Furniture1Texture = textureLoader.load("/model/img/mobile/room1_furniture1-resize-mobile.webp"), room1Furniture2Texture = textureLoader.load("/model/img/mobile/room1_furniture2-adjusted-mobile.webp"), room2FloorTexture = textureLoader.load("/model/img/mobile/room2_floor-resize-mobile.webp"), room2BlocksTexture = textureLoader.load("/model/img/mobile/room2_blocks-resize-mobile.webp"), room2WallTexture = textureLoader.load("/model/img/mobile/room2_wall-topaz-compressed-mobile.jpg"), room2ProductsTexture = textureLoader.load("/model/img/mobile/room2_products-topaz-resize-mobile.webp"), room3FloorTexture = textureLoader.load("/model/img/mobile/room3_floor-resize-mobile.webp"), room3RocksTexture = textureLoader.load("/model/img/mobile/room3_rocks-den-mobile.webp"), room3DeerTexture = textureLoader.load("/model/img/mobile/room3_deer-den-mobile.webp"), room4RoofTexture = textureLoader.load("/model/img/mobile/room4_roof-topaz-mobile.webp"), room4FloorTexture = textureLoader.load("/model/img/mobile/room4_floor-resize-mobile.webp"), room4PlatformsTexture = textureLoader.load("/model/img/mobile/room4_platforms-den-mobile.webp"), room4ItemsTexture = textureLoader.load("/model/img/mobile/room4_items-topaz-mobile.webp"), room3Plants1ComTexture = textureLoader.load("/model/img/mobile/room3_plants1_com1-mobile.webp"), room3Plants2ComTexture = textureLoader.load("/model/img/mobile/room3_plants2_com1-mobile.webp")), entranceGodrayTexture.flipY = !1;
let entranceGodrayMaterial = new e.MeshBasicMaterial({
    map: entranceGodrayTexture,
    transparent: !0,
    opacity: .2,
    blending: e.AdditiveBlending,
    depthWrite: !1
});
entranceWallTexture.flipY = !1;
let entranceWallMaterial = new e.MeshBasicMaterial({
    map: entranceWallTexture
});
room1WallTexture.flipY = !1;
let room1WallMaterial = new e.MeshBasicMaterial({
    map: room1WallTexture
});
room1FloorTexture.flipY = !1;
let room1FloorMaterial = new e.MeshBasicMaterial({
    map: room1FloorTexture
});
room1WindowTexture.flipY = !1;
let room1WindowMaterial = new e.MeshBasicMaterial({
    map: room1WindowTexture
});
room1Furniture1Texture.flipY = !1;
let room1Furniture1Material = new e.MeshBasicMaterial({
    map: room1Furniture1Texture
});
room1Furniture2Texture.flipY = !1;
let room1Furniture2Material = new e.MeshBasicMaterial({
    map: room1Furniture2Texture
});
room2FloorTexture.flipY = !1;
let room2FloorMaterial = new e.MeshBasicMaterial({
    map: room2FloorTexture
});
room2BlocksTexture.flipY = !1;
let room2BlocksMaterial = new e.MeshBasicMaterial({
    map: room2BlocksTexture
});
room2WallTexture.flipY = !1;
let room2WallMaterial = new e.MeshBasicMaterial({
    map: room2WallTexture
});
room2ProductsTexture.flipY = !1;
let room2ProductsMaterial = new e.MeshBasicMaterial({
    map: room2ProductsTexture
});
room3FloorTexture.flipY = !1;
let room3FloorMaterial = new e.MeshBasicMaterial({
    map: room3FloorTexture
});
room3RocksTexture.flipY = !1;
let room3RocksMaterial = new e.MeshBasicMaterial({
    map: room3RocksTexture
});
room3DeerTexture.flipY = !1;
let room3DeerMaterial = new e.MeshBasicMaterial({
    map: room3DeerTexture
});
room4RoofTexture.flipY = !1;
let room4RoofMaterial = new e.MeshBasicMaterial({
    map: room4RoofTexture
});
room4FloorTexture.flipY = !1;
let room4FloorMaterial = new e.MeshBasicMaterial({
    map: room4FloorTexture
});
room4PlatformsTexture.flipY = !1;
let room4PlatformsMaterial = new e.MeshBasicMaterial({
    map: room4PlatformsTexture
});
room4ItemsTexture.flipY = !1;
let room4ItemsMaterial = new e.MeshBasicMaterial({
    map: room4ItemsTexture
});
room3Plants1ComTexture.flipY = !1;
let room3Plants1ComMaterial = new e.MeshBasicMaterial({
    map: room3Plants1ComTexture,
    transparent: !0,
    alphaTest: .5
});
room3Plants2ComTexture.flipY = !1;
let room3Plants2ComMaterial = new e.MeshBasicMaterial({
    map: room3Plants2ComTexture,
    transparent: !0,
    alphaTest: .5
});
var loader = new r;
let dracoLoader = new o;
dracoLoader.setDecoderPath("/draco/"), loader.setDRACOLoader(dracoLoader), loader.load("/model/room.glb", function(r) {
    r.scene.traverse(r => {
        r.isMesh && (r.frustumCulled = !1, Pace.on("done", function() {
            r.frustumCulled = !0
        })), r.name.includes("camera_empty") && (cameraEmpty = r), r.name.includes("bloom"), r.name.includes("entrance_godray") && (r.material = entranceGodrayMaterial, r.material.side = e.DoubleSide, entranceGodray = r), r.name.includes("monitor_screen") && (r.material = textureVideoDesktopMaterial), r.name.includes("phone_screen") && (r.material = textureVideoMobileMaterial), r.name.includes("room_entrance_1") && (r.material = entranceMaterial0, roomAnimate0 = r), r.name.includes("room_entrance-1_cover") && (r.material = entranceMaterial0Cover, roomAnimate0_cover = r, r.visible = !1), r.name.includes("room_entrance_2") && (r.material = entranceMaterial1, roomAnimate1 = r), r.name.includes("room_entrance-2_cover") && (r.material = entranceMaterial1Cover, roomAnimate1_cover = r), r.name.includes("room_entrance_3") && (r.material = entranceMaterial2, roomAnimate2 = r), r.name.includes("room_entrance-3_cover") && (r.material = entranceMaterial2Cover, roomAnimate2_cover = r), r.name.includes("white_mat") && (r.material = whiteMaterial), r.name.includes("entrance_wall") && (r.material = entranceWallMaterial), r.name.includes("room1_wall") && (r.material = room1WallMaterial), r.name.includes("room1_floor") && (r.material = room1FloorMaterial), r.name.includes("room1_window") && (r.material = room1WindowMaterial), r.name.includes("room1_furniture1") && (r.material = room1Furniture1Material, r.material.side = e.DoubleSide), r.name.includes("room1_furniture2") && (r.material = room1Furniture2Material), r.name.includes("room2_floor") && (r.material = room2FloorMaterial), r.name.includes("room2_blocks") && (r.material = room2BlocksMaterial), r.name.includes("room2_wall") && (r.material = room2WallMaterial), r.name.includes("room2_products") && (r.material = room2ProductsMaterial, r.material.side = e.DoubleSide), r.name.includes("room3_floor") && (r.material = room3FloorMaterial), r.name.includes("room3_rocks") && (r.material = room3RocksMaterial), r.name.includes("room3_deer") && (r.material = room3DeerMaterial), r.name.includes("room4_roof") && (r.material = room4RoofMaterial), r.name.includes("room4_floor") && (r.material = room4FloorMaterial), r.name.includes("room4_platforms") && (r.material = room4PlatformsMaterial), r.name.includes("room4_items") && (r.material = room4ItemsMaterial, r.material.side = e.DoubleSide), r.name.includes("room3_plants1_com") && (r.material = room3Plants1ComMaterial, r.material.side = e.DoubleSide), r.name.includes("room3_plants2_com") && (r.material = room3Plants2ComMaterial, r.material.side = e.DoubleSide)
    }), (model = r.scene).scale.set(.35, .35, .35), holder.add(model), camera = window.innerWidth > 960 ? r.cameras[0] : r.cameras[1], camera.position.y -= 4, camera.rotation.x += .4, waterStart();
    for (let o = 0; o < r.animations.length; o++) "CameraAction" != r.animations[o].name && (mixerList[o] = new e.AnimationMixer(model), clipList[o] = r.animations[o], actionList[o] = mixerList[o].clipAction(clipList[o]), actionList[o].play());
    var t = e.AnimationClip.findByName(r.animations, "CameraAction");
    action = (mixer = new e.AnimationMixer(model)).clipAction(t), clipDuration = t.duration, action.clampWhenFinished = !0, action.setLoop(e.LoopOnce), action.play(), createAnimation(mixer, action, gltfAnimation = t), gsapTimeline(), gltfLoadedFunc(), gltfLoaded = !0, roomCreatedAni = !0
});
let glassMaterial = new e.MeshPhysicalMaterial({
    metalness: 1,
    roughness: .1,
    envMapIntensity: .55,
    transparent: !0,
    opacity: .6,
    reflectivity: .2
});
var loaderUpsell = new r;
loaderUpsell.setDRACOLoader(dracoLoader);
var textureVideoDesktopImg, textureVideoMobileImg, textureVideoDesktopMaterial, textureVideoMobileMaterial, mixer, mixer1, model, cameraEmpty, entranceGodray, roomAnimate0, roomAnimate0_cover, roomAnimate1, roomAnimate1_cover, roomAnimate2, roomAnimate2_cover, mixerUpsell, modelUpsell, meshesRotate = [];
loaderUpsell.load("/model/model.glb", function(r) {
    r.scene.traverse(r => {
        r.isMesh && (r.frustumCulled = !1, Pace.on("done", function() {
            r.frustumCulled = !0, !0 != renderUpsellPause && (renderUpsellPause = !0)
        }), r.material.side = e.DoubleSide), r.isLight && window.innerWidth > 960 && (r.castShadow = !0, r.shadow.mapSize.width = 2048, r.shadow.mapSize.height = 2048, r.shadow.bias = -.0005, r.shadow.radius = 4), r.name.includes("earbud_mesh") && r.isMesh && (window.innerWidth > 960 && (r.castShadow = !0, r.receiveShadow = !0), r.material.side = e.DoubleSide), r.name.includes("meshRotate") && meshesRotate.push(r), r.name.includes("glass") && (r.material = glassMaterial)
    }), (modelUpsell = r.scene).scale.set(.35, .35, .35), holderUpsell.add(modelUpsell), cameraUpsell = window.innerWidth > 960 ? r.cameras[0] : r.cameras[1], gltfAnimationUpsell = r.animations[0];
    var o = setInterval(function() {
        !0 == roomCreatedAni && ((actionUpsell = (mixerUpsell = new e.AnimationMixer(modelUpsell)).clipAction(r.animations[0])).clampWhenFinished = !0, actionUpsell.setLoop(e.LoopOnce), actionUpsell.play(), createAnimationUpsell(mixerUpsell, actionUpsell, gltfAnimationUpsell), clearInterval(o), window.scrollTo(0, 0))
    }, 500)
});
let mouseX = 0,
    targetX = 0,
    mouseY = 0,
    targetY = 0,
    windowHalfX = window.innerWidth / 2,
    windowHalfY = window.innerHeight / 2;

function onDocumentMouseMove(e) {
    mouseX = e.clientX - windowHalfX, mouseY = e.clientY - windowHalfY
}
document.addEventListener("mousemove", onDocumentMouseMove);
var clock = new e.Clock,
    start = Date.now(),
    cameraLookAt = new e.Vector3(0, 0, 0),
    renderRoomPause = !1,
    renderUpsellPause = !1;

function render() {
    if (!1 == renderRoomPause) {
        camera.position.x += .05 * (2e-4 * mouseX - camera.position.x), camera.position.z += .05 * (2e-4 * mouseY - camera.position.z), camera.position.y < 0 && paceDone && (camera.position.y -= .02 * camera.position.y), camera.rotation.x -= .02 * (1e-5 * mouseY + camera.rotation.x + Math.PI / 2), camera.rotation.y -= .02 * (1e-5 * mouseX + camera.rotation.y), time = clock.elapsedTime;
        var e = clock.getDelta();
        for (timeUniform.value = time, mixer && (roomProgress = action.time / clipDuration * 100, mixer.update(e)), mixerList.length > 0 && mixerList.forEach(r => {
                r.update(e)
            }), i = 0; i < scene.children.length; i++) {
            var r = scene.children[i];
            "particle" == r.name && (r.rotation.y = .02 * time * (i < 4 ? i + 1 : -(i + 1)))
        }
        null != entranceGodray && (roomProgress < 5 ? (entranceGodrayRandom = Math.min(Math.random(), .8)) > .7 && entranceGodrayRandom < .8 || (entranceGodray.material.opacity = .12 + .08 * Math.abs(Math.sin(.8 * time))) : entranceGodray.material.opacity = .12 + .08 * Math.abs(Math.sin(1 * time))), null != roomAnimate0 && (roomAnimate0.material.opacity = Math.min(Math.max(1.35 - roomProgress / 10, 0), 1)), null != roomAnimate1 && null != roomAnimate1_cover && (roomAnimate1_cover.material.opacity = Math.min(Math.max(2.8 - roomProgress / 10, 0), 1), roomAnimate1.material.opacity = Math.min(Math.max(3.3 - roomProgress / 10, 0), 1)), null != roomAnimate2 && null != roomAnimate2_cover && (roomAnimate2_cover.material.opacity = Math.min(Math.max(5.35 - roomProgress / 10, 0), 1), roomAnimate2.material.opacity = Math.min(Math.max(5.35 - roomProgress / 10, 0), 1)), window.innerWidth > 960 ? (sceneProgressAnchor(14, "#scene-content-2-h2"), sceneProgressAnchor(18, "#scene-content-2-p"), sceneProgressAnchor(34, "#scene-content-3-h2"), sceneProgressAnchor(38, "#scene-content-3-p"), sceneProgressAnchor(56, "#scene-content-4-h2"), sceneProgressAnchor(62, "#scene-content-4-p")) : window.innerWidth < 961 && (sceneProgressMobileAnchor(3, 100, "#scene-content-1-h2"), sceneProgressMobileAnchor(3, 100, "#scene-content-1-p"), sceneProgressMobileAnchor(14, 28, "#scene-content-2-h2"), sceneProgressMobileAnchor(14, 28, "#scene-content-mobile-2-p"), sceneProgressMobileAnchor(34, 50, "#scene-content-3-h2"), sceneProgressMobileAnchor(34, 50, "#scene-content-mobile-3-p"), sceneProgressMobileAnchor(56, 70, "#scene-content-4-h2"), sceneProgressMobileAnchor(56, 70, "#scene-content-mobile-4-p")), requestAnimationFrame(render)
    }
    camera.aspect = window.innerWidth / window.innerHeight, camera.updateProjectionMatrix(), renderer.render(scene, camera)
}

function renderUpsell() {
    if (!1 == renderUpsellPause) {
        if (window.innerWidth > 767)
            for (i = 0; i < meshesRotate.length; i++) {
                var e = meshesRotate[i];
                e.rotation.x -= .035 * (3e-4 * mouseY + e.rotation.x), e.rotation.y -= .035 * (3e-4 * mouseX + e.rotation.y)
            }
        time = clock.elapsedTime;
        var r = clock.getDelta();
        timeUniform.value = time, mixerUpsell && mixerUpsell.update(r), cameraUpsell.aspect = window.innerWidth / window.innerHeight, cameraUpsell.updateProjectionMatrix(), rendererUpsell.render(sceneUpsell, cameraUpsell), requestAnimationFrame(renderUpsell)
    }
}

function sceneProgressAnchor(e, r) {
    roomProgress >= e ? document.querySelector(r).classList.contains("active") || document.querySelector(r).classList.add("active") : document.querySelector(r).classList.contains("active") && document.querySelector(r).classList.remove("active")
}

function sceneProgressMobileAnchor(e, r, o) {
    roomProgress >= e && roomProgress <= r ? document.querySelector(o).classList.contains("active") || document.querySelector(o).classList.add("active") : document.querySelector(o).classList.contains("active") && document.querySelector(o).classList.remove("active")
}

function createAnimation(e, r, o) {
    let t = gsap.timeline({
        scrollTrigger: {
            trigger: renderer.domElement,
            start: "top top",
            end: "+=900%",
            width: "100%",
            height: "100%",
            pin: "#scene-inner",
            pinType: "fixed",
            scrub: 1.25,
            onUpdate: function() {
                camera.updateProjectionMatrix()
            }
        }
    });
    t.to({
        get time() {
            return e.time
        },
        set time(value) {
            r.paused = !1, e.setTime(value), r.paused = !0
        }
    }, {
        time: o.duration
    }), window.innerWidth > 960 && t.to(".scene-content-inner", {
        ease: "none",
        z: 4e3,
        force3D: "false",
        duration: .245
    }, "<")
}

function createAnimationUpsell(e, r, o) {
    let t = gsap.timeline({
        scrollTrigger: {
            trigger: ".products-wrapper",
            start: "top top",
            end: "+=600%",
            width: "100%",
            height: "100%",
            pin: !0,
            pinType: "fixed",
            scrub: 1.8,
            onUpdate: function() {
                cameraUpsell.updateProjectionMatrix()
            }
        }
    });
    t.to(".products-title-span-outer-1", {
        ease: "none",
        opacity: .08,
        duration: .05,
        delay: .05
    }), t.to(".products-title-span-outer-2", {
        ease: "none",
        opacity: .08,
        duration: .05
    }, "<"), t.to({
        get time() {
            return e.time
        },
        set time(value) {
            r.paused = !1, e.setTime(value), r.paused = !0
        }
    }, {
        time: o.duration
    }, "<"), t.to(".product-captions", {
        ease: "none",
        width: 60,
        height: 60,
        opacity: 1,
        y: 0,
        duration: .02
    }, "<"), t.to(".product-captions", {
        ease: "none",
        width: 800,
        duration: .025,
        delay: .02
    }, "<"), t.to(".product-captions-1", {
        ease: "none",
        opacity: 1,
        y: "0%",
        duration: .02,
        delay: .02
    }, "<"), t.to(".product-captions-1", {
        ease: "none",
        opacity: 0,
        y: "-80%",
        duration: .02,
        delay: .08
    }, "<"), t.to(".product-captions-2", {
        ease: "none",
        opacity: 1,
        y: "0%",
        duration: .02,
        delay: .02
    }, "<"), t.to(".product-captions-2", {
        ease: "none",
        opacity: 0,
        y: "-80%",
        duration: .02,
        delay: .08
    }, "<"), t.to(".product-captions-3", {
        ease: "none",
        opacity: 1,
        y: "0%",
        duration: .02,
        delay: .02
    }, "<"), t.to(".products-title", {
        ease: "none",
        opacity: 0,
        duration: .005,
        delay: .088
    }, "<"), t.to(".products-end-title-inner", {
        ease: "none",
        scale: 1,
        duration: .005
    }, "<"), t.to(".product-captions", {
        ease: "none",
        opacity: 0,
        duration: .005
    }, "<"), t.to(".products-wrapper", {
        ease: "none",
        opacity: .5,
        duration: .05
    }, "<+=0.08"), t.to(".products-end-title-inner", {
        ease: "none",
        opacity: 0,
        duration: .015
    }, "<+=0.02")
}
render(), renderUpsell(), gsap.registerPlugin(ScrollTrigger), ScrollTrigger.config({
    limitCallbacks: !0,
    ignoreMobileResize: !0
});
let servicesTimeline, portfolioTimeline;

function gsapTimeline() {
    servicesWrapperWidth = document.getElementsByClassName("services-inner-wrapper")[0].getBoundingClientRect().width - window.innerWidth + 60, servicesTimeline = window.innerWidth > 960 ? gsap.timeline({
        scrollTrigger: {
            trigger: ".services-wrapper",
            start: "top top",
            end: "+=320%",
            pin: !0,
            pinType: "fixed",
            anticipatePin: 1,
            scrub: 1
        }
    }) : gsap.timeline({
        scrollTrigger: {
            trigger: ".services-wrapper",
            start: "top top",
            end: "+=350%",
            pin: !0,
            pinType: "fixed",
            anticipatePin: 1,
            scrub: 1
        }
    }), window.innerWidth > 960 ? (servicesTimeline.to(".services-inner-container", {
        ease: "none",
        y: "0%",
        duration: .1
    }), servicesTimeline.to(".services-inner-pos", {
        ease: "none",
        x: "0%",
        duration: 1.2
    }, "<"), servicesTimeline.to(".services-inner-wrapper", {
        ease: "none",
        x: "0%",
        duration: 1.2
    }, "<")) : (servicesTimeline.to(".services-inner-container", {
        ease: "none",
        y: "0%",
        duration: .5
    }), servicesTimeline.to(".services-inner-pos", {
        ease: "none",
        x: "0%",
        duration: 2
    }), servicesTimeline.to(".services-inner-wrapper", {
        ease: "none",
        x: "0%",
        duration: 2
    }, "<"))
}
var elementTarget = document.getElementsByClassName("services-wrapper")[0],
    headerTarget = document.getElementsByClassName("portfolios-wrapper")[0],
    portfolioChild = document.getElementsByClassName("portfolios-container-child"),
    contactWrapper = document.getElementsByClassName("contact-wrapper")[0];

function gltfLoadedFunc() {
    document.body.classList.add("preloaded"), window.addEventListener("scroll", function() {
        for (i = 0; i < portfolioChild.length; i++) portfolioChild[i].getBoundingClientRect().top < windowHalfY && !portfolioChild[i].classList.contains("active") && portfolioChild[i].classList.add("active");
        contactWrapper.getBoundingClientRect().top + contactWrapper.offsetHeight / 2 < window.innerHeight && !contactWrapper.classList.contains("active") && contactWrapper.classList.add("active"), elementTarget.getBoundingClientRect().bottom < 0 ? document.querySelector("html").classList.contains("dark") || (document.querySelector("html").classList.add("dark", "room-over"), document.querySelector(".products-wrapper").classList.add("active"), renderRoomPause = !0, clearTimeout(renderUpsellPauseFunc), renderUpsellPause = !1, renderUpsell()) : document.querySelector("html").classList.contains("dark") && (document.querySelector("html").classList.remove("dark", "room-over"), document.querySelector(".products-wrapper").classList.remove("active"), renderRoomPause = !1, renderUpsellPauseFunc = setTimeout(function() {
            renderUpsellPause = !0
        }, 500), render()), elementTarget.getBoundingClientRect().bottom < -100 ? document.querySelector("header").classList.contains("header-toggle-ready") || document.querySelector("header").classList.add("header-toggle-ready") : document.querySelector("header").classList.contains("header-toggle-ready") && document.querySelector("header").classList.remove("header-toggle-ready"), elementTarget.getBoundingClientRect().bottom < -200 ? document.querySelector("header").classList.contains("header-toggle") || document.querySelector("header").classList.add("header-toggle") : document.querySelector("header").classList.contains("header-toggle") && document.querySelector("header").classList.remove("header-toggle"), headerTarget.getBoundingClientRect().top < 100 && document.querySelector("html").classList.contains("dark") ? document.querySelector(".menu-wrapper").classList.contains("menu-bg-ready") || (document.querySelector(".menu-wrapper").classList.add("menu-bg-ready"), document.querySelector(".logo-wrapper").classList.add("menu-bg-ready")) : document.querySelector(".menu-wrapper").classList.contains("menu-bg-ready") && (document.querySelector(".menu-wrapper").classList.remove("menu-bg-ready"), document.querySelector(".logo-wrapper").classList.remove("menu-bg-ready")), headerTarget.getBoundingClientRect().top < 0 && document.querySelector("html").classList.contains("dark") ? document.querySelector(".menu-wrapper").classList.contains("menu-bg") || (document.querySelector(".menu-wrapper").classList.add("menu-bg"), document.querySelector(".logo-wrapper").classList.add("menu-bg"), renderUpsellPauseFunc = setTimeout(function() {
            renderUpsellPause = !0
        }, 500)) : document.querySelector(".menu-wrapper").classList.contains("menu-bg") && (document.querySelector(".menu-wrapper").classList.remove("menu-bg"), document.querySelector(".logo-wrapper").classList.remove("menu-bg"), clearTimeout(renderUpsellPauseFunc), renderUpsellPause = !1, renderUpsell())
    });
    var e = document.getElementsByClassName("menu-child");
    for (let r = 0; r < e.length; r++) {
        var o = e[r].offsetWidth;
        e[r].style.cssText = "--width: " + o + "px", e[r].style.width = 0
    }
    if (window.scrollTo(0, 0), window.innerWidth > 960) {
        let t = curDot({
            zIndex: 100,
            diameter: 10,
            borderWidth: 0,
            easing: 6,
            background: "linear-gradient(90deg, #ff9000, #cf6500)",
            mixBlendMode: "screen"
        });
        t.over("a, input[type='submit']", {
            scale: -1,
            opacity: 1
        })
    }
}
var paceDone = !1;
Pace.on("done", function() {
    var e = setInterval(function r() {
        if (!0 == gltfLoaded) {
            paceDone = !0, document.body.classList.add("pace-preloaded"), setTimeout(function() {
                document.getElementsByClassName("scene-content")[0].classList.add("loaded")
            }, 1500), clearInterval(e);
            return
        }
    }, 200)
});
let menuItem = document.querySelectorAll(".menu-child");
menuItem.forEach(e => {
    e.addEventListener("click", r => {
        r.preventDefault(), menuItemData = e.getAttribute("data-menu"), menuItemPos = (menuItemId = document.querySelector(menuItemData)).offsetTop, document.querySelector(".menu-transition").classList.add("transition"), "#home" == menuItemData || "#services" == menuItemData ? document.getElementsByClassName("menu-transition")[0].classList.add("white") : document.getElementsByClassName("menu-transition")[0].classList.add("grey"), setTimeout(function() {
            if ("#services" != menuItemData) window.scrollTo(0, menuItemPos);
            else if (window.innerWidth > 1200) window.scrollTo(0, 5.1 * window.innerHeight);
            else if (window.innerWidth > 960 && window.innerWidth < 1201) window.scrollTo(0, 5.05 * window.innerHeight);
            else {
                let e = document.getElementById("services_wrapper").parentElement.getBoundingClientRect().top + window.scrollY + 1.8 * document.getElementById("services").offsetHeight;
                window.scroll({
                    top: e
                })
            }
        }, 800), setTimeout(function() {
            document.querySelector(".menu-transition").classList.remove("transition", "white", "grey", "black")
        }, 2500)
    })
});
let portfoliosBtn = document.querySelectorAll(".portfolios-btn"),
    portfoliosPopup = document.getElementsByClassName("portfolios-popup")[0],
    portfoliosPopupInner = document.getElementsByClassName("portfolios-popup-inner")[0],
    portfoliosPopupBg = document.getElementsByClassName("portfolios-popup-bg")[0];

function checkImagesLoaded(e, r) {
    var o = 0;

    function t() {
        ++o === e.length && r()
    }
    e.forEach(function(e) {
        e.onload = t, e.onloadeddata = t
    })
}
if (portfoliosBtn.forEach(e => {
        e.addEventListener("click", r => {
            r.preventDefault(), portfoliosPopup.classList.contains("active") || ("undefined" != typeof lenis && lenis.stop(), portfoliosPopup.classList.add("active"), portfoliosPopupBg.classList.add("active"), portfoliosPopupInner.scrollTop = 0);
            var o = e.closest(".portfolios-container-child").className.split(" ")[1],
                t = e.closest(".portfolios-container-child").className.split(" ")[1].replace("portfolio-", "") - 1,
                a = document.querySelector(".portfolio-item." + o),
                n = new XMLHttpRequest;
            n.open("GET", "portfolios.json"), n.onload = function() {
                var e = JSON.parse(n.responseText);
                if (a.classList.add("active"), void 0 != a.getElementsByTagName("video")[0] && a.getElementsByTagName("video")[0].play(), !a.classList.contains("loaded")) {
                    portfoliosPopup.classList.add("new");
                    let r = document.createElement(e[t].content.type);
                    "img" == e[t].content.type ? (r.setAttribute("src", e[t].content.image), a.getElementsByClassName("portfolios-item-image")[0].append(r)) : (r.src = e[t].content.video, r.controls = !1, r.muted = !0, r.loop = !0, a.getElementsByClassName("portfolios-item-image")[0].append(r), r.setAttribute("playsinline", ""), r.play());
                    let o = document.createElement("h4");
                    o.innerHTML = e[t].content.title, a.getElementsByClassName("portfolios-item-content-left")[0].append(o);
                    let l = document.createElement("h5");
                    l.innerHTML = e[t].content.category, a.getElementsByClassName("portfolios-item-content-left")[0].append(l);
                    let s = document.createElement("p");
                    if (s.innerHTML = e[t].content.description, a.getElementsByClassName("portfolios-item-content-right")[0].append(s), void 0 != e[t].content.link) {
                        let m = document.createElement("a");
                        m.innerHTML = "View Project", m.setAttribute("href", e[t].content.link), m.setAttribute("target", "_blank"), a.getElementsByClassName("portfolios-item-content-right")[0].append(m)
                    }
                    let c = document.createElement("img");
                    c.setAttribute("src", e[t].gallery.gallery1), a.getElementsByClassName("portfolios-item-gallery-left")[0].append(c);
                    let d = document.createElement("img");
                    d.setAttribute("src", e[t].gallery.gallery2), a.getElementsByClassName("portfolios-item-gallery-right")[0].append(d), checkImagesLoaded([r, c, d], function() {
                        a.classList.add("loaded"), portfoliosPopup.classList.remove("new")
                    })
                }
            }, n.send()
        })
    }), portfoliosPopupBg.addEventListener("click", () => {
        portfoliosPopup.classList.contains("active") && ("undefined" != typeof lenis && lenis.start(), void 0 != document.querySelector(".portfolio-item.active").getElementsByTagName("video")[0] && document.querySelector(".portfolio-item.active").getElementsByTagName("video")[0].pause(), document.querySelector(".portfolio-item.active").classList.remove("active"), portfoliosPopup.classList.remove("active"), portfoliosPopupBg.classList.remove("active"))
    }), window.innerWidth > 960) {
    let m = document.querySelectorAll(".portfolios-image");
    VanillaTilt.init(m, {
        max: 10,
        scale: .95,
        easing: "cubic-bezier(.03,.98,.52,.99)",
        speed: 2500
    })
}
document.getElementById("contact_form").addEventListener("submit", function(e) {
    e.preventDefault(), document.getElementById("form_result").classList.remove("active"), document.getElementById("form_result").innerText = "", document.getElementsByClassName("contact-wrapper-inner")[0].classList.add("form-sending");
    var r = e.target,
        o = new FormData(r),
        t = new XMLHttpRequest;
    t.onreadystatechange = function() {
        document.getElementById("form_result").innerText = t.responseText, 0 != t.status && (r.reset(), document.getElementById("form_result").classList.add("active"), document.getElementsByClassName("contact-wrapper-inner")[0].classList.remove("form-sending"))
    }, t.open(r.method, r.action), t.send(o)
}), document.getElementsByClassName("menu-wrapper")[0].addEventListener("click", function() {
    window.innerWidth < 768 && document.getElementsByClassName("menu-mobile")[0].classList.add("active")
}), document.getElementsByClassName("menu-mobile-close-btn")[0].addEventListener("click", function() {
    document.getElementsByClassName("menu-mobile")[0].classList.remove("active")
});
let mobileMenuChild = document.getElementsByClassName("mobile-menu-child");
for (i = 0; i < mobileMenuChild.length; i++) mobileMenuChild[i].addEventListener("click", function() {
    setTimeout(function() {
        document.getElementsByClassName("menu-mobile")[0].classList.remove("active")
    }, 800)
});
if (window.innerWidth > 960) {
    let c;
    window.onload = function() {
        function e(r) {
            c.raf(r), requestAnimationFrame(e)
        }
        c = new Lenis({
            duration: 1.2,
            easing: e => 1 === e ? 1 : 1 - Math.pow(2, -10 * e),
            direction: "vertical",
            gestureDirection: "vertical",
            smooth: !0,
            smoothTouch: !1
        }), requestAnimationFrame(e)
    }
}